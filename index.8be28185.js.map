{"mappings":"AAAA,MAKMA,EAAO,CACTC,UAAWC,SAASC,cAAc,aAClCC,WAAYF,SAASC,cAAc,kBAEnCE,WAAYH,SAASC,cAAc,kBAGvCH,EAAKI,WAAWE,MAAMC,QAAU,OAChC,IAAIC,EAAU,EAuBdC,eAAgBC,IAChB,MAAMC,QATNF,iBACE,MAAMG,QAAiBC,MAAM,yGACvBC,QAAaF,EAASG,OAE5B,aADuBD,EAAKH,M,CAMTK,GAnBVH,MAAM,mHACLL,yBACHS,MAAKC,IACF,IAAKA,EAAKC,GACN,MAAM,IAAIC,MAAMF,EAAKG,YACvB,OAAOH,EAAKH,MAAM,IAEvBO,OAAMC,GAAOC,QAAQC,IAAIF,KAc7BN,MAAKH,GAAQA,EAAKY,UAClBT,MAAKU,GAASA,EAAMC,KAAIC,IACzB,MAAMC,UAAEA,EAASC,YAAEA,EAAWC,MAAEA,EAAKC,aAAEA,EAAYC,aAAEA,EAAYC,GAAEA,GAAON,EAC1E,IAAIO,EAAc,GAClB,IAAK,MAAMC,KAAS1B,EAChBmB,EAAUQ,SAASD,EAAMF,KACrBC,EAAYG,KAAKF,EAAMG,MAE3BJ,EAAYK,OAAS,IACrBL,EAAc,IAAIA,EAAYM,MAAM,EAAG,GAAI,aAI3C,MAAMC,EAAa,gCAAgCR,uGAE3BJ,qHAGCC,EAAMY,kEAE7BR,OAAiBF,EAAaQ,MAAM,EAAG,+CACXG,OAAOZ,GAAcS,MAAM,EAAG,kDAKhE1C,EAAKC,UAAU6C,mBAAmB,YAAaH,EAAW,MAEzDrB,OAAMC,GAAOC,QAAQC,IAAIF,I,CApD9Bb,IAqEAV,EAAKK,WAAW0C,iBAAiB,UAMjCtC,eAAwBuC,GAMpB,GALAA,EAAIC,iBACJC,EAAcF,EAAIG,cAAcC,SAASC,YAAYC,MACrDC,KAAO,EACPvD,EAAKC,UAAUuD,UAAY,GAC3BhC,QAAQC,IAAIyB,IACPA,EAED,YADAO,SAASC,OAAOC,QAAQ,8BAI1B,IACE,MAAMC,QA/BH/C,MAAM,uHAEGqC,yBAEfjC,MAAKC,IACE,IAAKA,EAAKC,GACN,MAAM,IAAIC,MAAMF,EAAKG,YACvB,OAAOH,EAAKH,MAAM,IAE3BO,OAAOC,GAAOC,QAAQC,IAAIF,MAuBfG,QAAEA,GAAYkC,EACdC,EAASnC,EAAQE,KAAIkC,GAcpC,SAAsBjC,GAEnB,MAAME,YAAEA,EAAWC,MAAEA,EAAKC,aAAEA,EAAYC,aAAEA,GAAiBL,EAC3D,MAAQ,sHAEmBE,kHAGCC,EAAMY,mEAE1BV,EAAaQ,MAAM,EAAG,8CACGG,OAAOZ,GAAcS,MAAM,EAAG,8C,CAzBtBqB,CAAYD,KAAOE,KAAK,IAC3DhE,EAAKC,UAAUuD,UAAYK,C,CAK/B,MAAMI,GACJzC,QAAQC,IAAIwC,E,KAxBpB,IAAIf,EAAc,GAoDPrC,MAAM,sFACZI,MAAKC,IACE,IAAKA,EAAKC,GACN,MAAM,IAAIC,MAAMF,EAAKG,YACvB,OAAOH,EAAKH,MAAM,IAE3BO,OAAMC,GAAOC,QAAQC,IAAIF,KAIzBN,MAAKH,GAAQA,IACbQ,OAAMC,GAAOC,QAAQC,IAAIF,KAGnBV,MAAM,6FACRI,MAAKC,IACF,IAAKA,EAAKC,GACN,MAAM,IAAIC,MAAMF,EAAKG,YACvB,OAAOH,EAAKH,MAAM,IAEvBO,OAAMC,GAAOC,QAAQC,IAAIF,KAI7BN,MAAKH,GAAQA,IACbQ,OAAMC,GAAOC,QAAQC,IAAIF,KAI9BvB,EAAKI,WAAW2C,iBAAiB,SAIjC,WAEIvC,GAAW,EACXE,G,IANJwD,YAAW,KACJlE,EAAKI,WAAWE,MAAMC,QAAU,OAAO,GACvC","sources":["src/JS/api.js"],"sourcesContent":["const API_KEY = '671c14eb1babf71c7ecd9b35ab5716a8';\nconst BASE_URL = 'https://api.themoviedb.org/3';\nconst IMG_BASE_URL = 'https://image.tmdb.org/t/p/w500/';\nconst MOVIE_ID = '619930';\n\nconst refs = {\n    cardsArea: document.querySelector('.js-cards'),\n    onloadMore: document.querySelector('.load-more-btn'),\n\n    searchForm: document.querySelector(`.header__form`)\n\n};\nrefs.onloadMore.style.display = 'none';\nlet pageNum = 1;\n\nrenderTrendCardMarkup()\n\nfunction getTrendingMovies() {\n    return fetch(`${BASE_URL}/trending/movie/day?api_key=${API_KEY}&language=ru\n    &page=${pageNum}&include_adult=false`)\n        .then(resp => {\n            if (!resp.ok) {\n                throw new Error(resp.statusText)\n            } return resp.json()\n        })\n        .catch(err => console.log(err));\n};\n\nasync function getGenreNames() {\n  const response = await fetch(`${BASE_URL}/genre/movie/list?api_key=${API_KEY}&language=en-US`);\n  const data = await response.json();\n  const genNames = await data.genres\n  return genNames\n \n}\n\nasync function  renderTrendCardMarkup() {\nconst genres = await getGenreNames()\ngetTrendingMovies()\n    .then(data => data.results)\n    .then(cards => cards.map(card => { \n    const { genre_ids, poster_path, title, vote_average, release_date, id } = card;\n    let movieGenres = []; \n    for (const genre of genres) {\n    if (genre_ids.includes(genre.id)) {\n            movieGenres.push(genre.name)\n        }\n    if (movieGenres.length > 3) {\n        movieGenres = [...movieGenres.slice(0, 2), '...Other'];\n        }\n        }   \n          \n        const cardMarkup = `<li class='js-card' data-id=\"${id}\">\n     <button type=\"button\" class='js-on-card'>\n     <img src=\"${IMG_BASE_URL}${poster_path}\" alt=\"\" class='js-card-img'>\n     </button>\n     <div class='js-movie-descr'>\n     <p class='js-movie-title'>${title.toUpperCase()}</p>\n     <div class='js-movie-genres'>\n     <p>${movieGenres} | ${release_date.slice(0, 4)}</p>\n     <span class='js-movie-reiting'>${String(vote_average).slice(0, 3)}</span>\n     </div>\n     </div>\n     </li>`\n    \n    refs.cardsArea.insertAdjacentHTML('beforeend', cardMarkup)\n    }))\n    .catch(err => console.log(err));   \n}\n\nfunction getSearchMovies() {\n    return fetch(`${BASE_URL}/search/movie?api_key=${API_KEY}&language=ru\n\n    &page=1&query=${searchQuery}&include_adult=false`)\n\n    .then(resp => {\n            if (!resp.ok) {\n                throw new Error(resp.statusText)\n            } return resp.json()\n        })\n    .catch (err => console.log(err));\n}\n\n\nrefs.searchForm.addEventListener(`submit`, onSearch);\n\n\nlet searchQuery = ``;\n// let page = 1;\n\nasync function onSearch(evt){\n    evt.preventDefault();\n    searchQuery = evt.currentTarget.elements.searchQuery.value;\n    page = 1;\n    refs.cardsArea.innerHTML = '';\n    console.log(searchQuery);\n    if (!searchQuery){\n        Notiflix.Notify.failure(`Please, enter your request`);\n        return;\n      }\n    \n      try{\n        const SearchData = await getSearchMovies (searchQuery, page)\n          const { results } = SearchData;\n          const murkap = results.map(item => creatMarkup(item)).join('');\n          refs.cardsArea.innerHTML = murkap;\n\n        \n            \n      }\n      catch(error){\n        console.log(error)\n      }\n     \n        \n     \n  }\n\n function creatMarkup( card ){\n    \n    const { poster_path, title, vote_average, release_date } = card;\n    return  `<li class='js-card'>\n    <button type=\"button\" class='js-on-card'>\n    <img src=\"${IMG_BASE_URL}${poster_path}\" alt=\"\" class='js-card-img'>\n    </button>\n    <div class='js-movie-descr'>\n    <p class='js-movie-title'>${title.toUpperCase()}</p>\n    <div class='js-movie-genres'>\n    <p> | ${release_date.slice(0, 4)}</p>\n    <span class='js-movie-reiting'>${String(vote_average).slice(0, 3)}</span>\n    </div>\n    </div>\n    </li>`\n }\n\n\n\n\nfunction getMovieDetails() {\n    return fetch(`${BASE_URL}/movie/${MOVIE_ID}?api_key=${API_KEY}`)\n    .then(resp => {\n            if (!resp.ok) {\n                throw new Error(resp.statusText)\n            } return resp.json()\n    })\n    .catch(err => console.log(err));\n};\n\ngetMovieDetails()\n    .then(data => data)\n    .catch(err => console.log(err));\n\nfunction getMovieVideos() {\n    return fetch(`${BASE_URL}/movie/619930/videos?api_key=${API_KEY}`)\n        .then(resp => {\n            if (!resp.ok) {\n                throw new Error(resp.statusText)\n            } return resp.json()\n        })\n        .catch(err => console.log(err));\n}\n\ngetMovieVideos()\n    .then(data => data)\n    .catch(err => console.log(err));\n\n\n\nrefs.onloadMore.addEventListener('click', onLoadMoreBtn)\nsetTimeout(() => {\n       refs.onloadMore.style.display = 'block' \n    }, 2000);\nfunction onLoadMoreBtn() {\n    \n    pageNum += 1;\n    renderTrendCardMarkup()\n}"],"names":["$d637584d1bf81fd1$var$refs","cardsArea","document","querySelector","onloadMore","searchForm","style","display","$d637584d1bf81fd1$var$pageNum","async","$d637584d1bf81fd1$var$renderTrendCardMarkup","genres","response","fetch","data","json","$d637584d1bf81fd1$var$getGenreNames","then","resp","ok","Error","statusText","catch","err","console","log","results","cards","map","card","genre_ids","poster_path","title","vote_average","release_date","id","movieGenres","genre","includes","push","name","length","slice","cardMarkup","toUpperCase","String","insertAdjacentHTML","addEventListener","evt","preventDefault","$d637584d1bf81fd1$var$searchQuery","currentTarget","elements","searchQuery","value","page","innerHTML","Notiflix","Notify","failure","SearchData","murkap","item","$d637584d1bf81fd1$var$creatMarkup","join","error","setTimeout"],"version":3,"file":"index.8be28185.js.map"}